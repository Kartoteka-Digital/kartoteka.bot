"""
Telegram-–±–æ—Ç –Ω–∞ aiogram.
–î–ª—è –ø—Ä–æ–¥ ‚Äî –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ webhook –∏ –ø–æ–≤–µ—Å–∏—Ç—å –ø–æ–¥ systemd.
"""
import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

from collections import defaultdict, deque
from app.rag.rag import answer
# from app.filters.heuristics import early_gate
from app.rag.vector_store import search as vec_search
from app.rag.vector_store import warmup_vector_store
from app.filters.relevance_gate import RelevanceGate
from app.rag.retrieval_pipeline import retrieve_with_rerank

import logging
from openai import APIError, APIConnectionError, RateLimitError

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

gate = RelevanceGate()

USE_RETRIEVAL_PIPELINE = os.getenv("USE_RETRIEVAL_PIPELINE", "0") == "1"
SMART_PIPELINE_THRESHOLD = float(os.getenv("SMART_PIPELINE_THRESHOLD", "0.80"))

def smart_search(q: str):
    # 1) –±—ã—Å—Ç—Ä—ã–π FAISS
    hits = vec_search(q)
    if not USE_RETRIEVAL_PIPELINE:
        return hits
    if not hits:
        # –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π ‚Äî –ø—Ä–æ–±—É–µ–º ¬´—É–º–Ω—ã–π¬ª –ø–∞–π–ø–ª–∞–π–Ω
        return retrieve_with_rerank(q)[1]

    # 2) –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è ‚Äî –ø–æ–¥–∫–ª—é—á–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
    best = float(hits[0].get("score", 0.0))
    if best < SMART_PIPELINE_THRESHOLD:
        return retrieve_with_rerank(q)[1]

    # 3) –∏–Ω–∞—á–µ –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ –±—ã—Å—Ç—Ä–æ–º –ø–æ–∏—Å–∫–µ
    return hits

CHAT_TAIL: dict[int, deque[str]] = defaultdict(lambda: deque(maxlen=4)) # 4 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ø–ª–∏–∫–∏

@dp.message(CommandStart())
async def start(m: Message):
    await m.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Kartoteka.Support. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.\n\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º–µ–π –≤ –≤–∏–¥—É: –∏–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏."
    )

# bot.py ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ask_cmd: –∑–∞–º–µ–Ω—è–µ–º early_gate(...) –Ω–∞ gate.check(...)
@dp.message(Command("ask"))
async def ask_cmd(m: Message):
    parts = m.text.split(maxsplit=1)
    user_q = parts[1].strip() if len(parts) > 1 else ""

    verdict = gate.check(
        question=user_q,
        search_fn=smart_search,  # –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –ø–æ–∏—Å–∫–∞
    )
    if not verdict.allow:
        await m.answer(verdict.reason or "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.")
        return

    await m.chat.do("typing")

    try:
        out = answer(
            user_q,
            chat_tail="\n".join(CHAT_TAIL[m.chat.id]),
            prefetched_hits=verdict.hits,  # —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ
        )
    except (APIError, APIConnectionError, RateLimitError):
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ")
        await m.answer("–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —É—Ç–æ—á–Ω–∏ –≤–æ–ø—Ä–æ—Å.")
        return

    CHAT_TAIL[m.chat.id].append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_q}\n–ë–æ—Ç: {out['answer']}")
    await m.answer(out["answer"])

    if out.get("links"):
        seen, lines = set(), []
        i = 1
        for item in out["links"]:
            url = str(item.get("url") or "").strip()
            if not url or url in seen:
                continue
            seen.add(url)
            title = (item.get("title") or "–ò—Å—Ç–æ—á–Ω–∏–∫").strip()
            if title.lower().endswith(".md"):
                from pathlib import Path
                title = Path(title).stem
            lines.append(f"{i}) {title} - {url}")
            i += 1
        if lines:
            await m.answer("üîó –í–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join(lines), disable_web_page_preview=True)


@dp.message(F.text)
async def any_text(m: Message):
    # –ª—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Äî –∫–∞–∫ –≤–æ–ø—Ä–æ—Å
    await ask_cmd(m)

async def main():
    warmup_vector_store()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())